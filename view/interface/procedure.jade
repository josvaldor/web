extends ../theme
block append head-link
	link(rel='stylesheet', href='/meritbuilders/css/account/instruction.css')
	link(rel='stylesheet', href='/meritbuilders/css/account/procedure.css')

block content
	.content-wrapper
		if(typeof(procedureList) !== 'undefined')
			nav
				ul  
					li
						if(idProject)

						else if(idEmployee)
							a(href='/employee/#{idEmployee}/session', class='button')= 'SESSION'
						else
							a(href='/session', class='button')= 'SESSION'
					li 
						if(idProject)
							a(href='/project/#{idProject}/inspection', class='button')= 'INSPECTION'  
						else if(idEmployee)
							a(href='/employee/#{idEmployee}/inspection', class='button')= 'INSPECTION'  
						else
							a(href='/inspection', class='button')= 'INSPECTION'   
					li 
						if(idProject)

						else if(idEmployee)
							a(href='/employee/#{idEmployee}/test', class='button')= 'TEST'
						else
							a(href='/test', class='button')= 'TEST'
					li 
						if(idProject)
							a(href='/project/#{idProject}/procedure', class='button')= 'ALL'
						else if(idEmployee)
							a(href='/employee/#{idEmployee}/procedure', class='button')= 'ALL'
						else
							a(href='/procedure', class='button')= 'ALL'
					li 
						input(type="button", class="button", id='read', value="READ")
					li 
						input(type="button", class="button", id='write', value="WRITE")
					li 
						input(type="button", class="button", id='execute', value="EXECUTE")
			.list
				input(type='hidden', name='url', value='#{url}')
				if procedureList.length > 0
					ul
						-var notAuthorized = true
						each procedure, i in procedureList
							-var procedureSignature = (procedure.signatureDate === null ? '' : 'procedure-signature');
							li(name='#{procedure.idProcedure}-procedure-#{procedure.permissionLabel}', id='procedure-#{procedure.permissionLabel}', class='procedure-#{procedure.permissionLabel} #{procedure.userProcedureType}')
								-notAuthorized=false
								table
									tr 
										td
											if typeof(generalManager) !== 'undefined' && generalManager
												input(type='checkbox', name='procedurecheckbox',class='hidden', value='#{procedure.idProcedure}')
										td
											if(idProject)
												a(href='/project/#{idProject}/procedure/#{procedure.idProcedure}') #{procedure.name}
											else if(idEmployee)
												a(href='/employee/#{idEmployee}/procedure/#{procedure.idProcedure}') #{procedure.name}
											else 
												a(href='/procedure/#{procedure.idProcedure}') #{procedure.name}
										td
											| #{procedure.label}
										td  
											| #{procedure.permissionLabel}                                                        
										td
											if procedure.createDateLabel !== null
												| #{procedure.createDateLabel}
										td
											if procedure.activityDateLabel !== null
												| #{procedure.activityDateLabel}
										td 
											if procedure.completeDateLabel !== null
												| #{procedure.completeDateLabel}
										td
											if procedure.permissionLabel === 'write'
												input(type='button', class='button', id='not-applicable', name='#{procedure.idProcedure}', value="NOT APPLICABLE")
											else
												| 
										td
											if typeof generalManager !== 'undefined' && generalManager
												input(type='button', class='button', id='delete', name='#{procedure.idProcedure}', value="DELETE")
											else 
												| 


						if notAuthorized
							p Not Authorized
				else 
					p Empty
		else if(typeof(procedure) !== 'undefined')
			if procedure.signatureDate !== null
				p Signature Date #{procedure.signatureDate}
			if procedure.permission === 3
				.procedure-execute
					h2 #{procedure.name}
					if("#{message}")
						h4(style='color:red') #{message}
					input(type='hidden', name='url', value='#{url}')
					if(typeof(image) !== 'undefined')
						img(src="data:image/jpeg;base64,#{image}",class="procedure-image")
					if(typeof(idUser) !== 'undefined')
						input(type="hidden", name="iduser", value="#{idUser}")
					if(typeof(idProject) !== 'undefined')
						input(type="hidden", name="idproject", value="#{idProject}")
					if(typeof(idEmployee) !== 'undefined')
						input(type="hidden", name="idemployee", value="#{idEmployee}")
					if(typeof(procedure.idProcedure) !== 'undefined')
						input(type="hidden", name="idprocedure", value="#{procedure.idProcedure}")
					-var bloc = null;
					-var previous =null;
						if(typeof(procedure.instructionList) !== "undefined")
							.list
								each instruction, i in procedure.instructionList
									if(instruction.idInstruction !== null)
										.instruction-write
											-bloc=instruction.block
											if(bloc != null)
												if(bloc != previous)
													-previous= bloc  

													h3 #{instruction.block}
											else
												.bloc
											ul
												li 
													-var style = (instruction.value>-2?(instruction.value==-1?'background-color:gray':'background-color:green'):'')
													table(class="instruction-table")
														tr
															td
																h3 #{instruction.statement}
														tr            
															td
																if instruction.description !== undefined 
																	p #{instruction.description}
														tr 
															-var flag = true;
															-var mean = 0
															-var n = instruction.maximum
															-var sum = 0
															-var step = instruction.step ||1;
															-var count = (((instruction.maximum-instruction.minimum)+1)/step)
															td
																table(style=style, name="#{instruction.idInstruction}-table", class="instruction-table")
																	if instruction.type !== undefined && instruction.type == 'question'

																		while n >= instruction.minimum
																			-sum=sum+n
																			-var l = null
																			each v, k in instruction.label
																				if k === n+''
																					-l=v

																			if l !== null

																				if instruction.maximum > 1
																					-flag = false;
																					tr
																						td(style='text-align: left')
																							input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																						td(style='text-align: left;')
																							-var lab = null
																							if(instruction.mask !== null)
																								each x, z in instruction.mask
																									if z === n+''
																										-lab=x
																								if lab !== null        
																									label (#{lab})
																							| #{l} 
																			if flag
																				tr
																					td(style='text-align: left;')
																						input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																					td(style='text-align: left;')
																						br
																						label #{l} 
																			-n=n-step

																		input(type="hidden", name="#{instruction.name}-idinstruction", value="#{instruction.idInstruction}")    
																	else
																		tr
																			while n >= instruction.minimum
																				-sum=sum+n
																				-var l = null
																				each v, k in instruction.label
																					if k === n+''
																						-l=v

																				if l !== null

																					if instruction.maximum > 1
																						-flag = false;
																						td
																							input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																							br
																							label (#{n})
																							br
																							| #{l} 
																				if flag
																					td
																						input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																						br
																						label #{l} 
																				-n=n-step
																			td
																				input(type="radio", name="#{instruction.name}", class="not-applicable", value=-1, checked="#{instruction.value}"==-1)
																				br
																				label NA
																			-mean=sum/count
																			input(type="hidden", name="#{instruction.name}-idinstruction", value="#{instruction.idInstruction}")
																			input(type='hidden', name='#{instruction.idInstruction}-mean', value='#{mean}')
															td
																-var show = ((instruction.value >= instruction.minimum && Math.round(Number(instruction.value)) !== mean)?'visible':'hidden');
																div(name="#{instruction.idInstruction}-div", class=show, id='comment-div')
																	table
																		tr
																			td
																				textarea(name="#{instruction.idInstruction}-textarea", id='instruction-comment-textarea') 
																					-var instructionComment = (instruction.comment !== "null"?true:false);
																					if instructionComment
																						| #{instruction.comment}
																		tr
																			td
																				input(type="button", class="button", id="comment",name="#{instruction.idInstruction}",  value="COMMENT")
															td
																if instruction.type === 'question'
																	input(type="button", class="button", id="queue",name="#{instruction.idInstruction}",  value="QUEUE")
			else if procedure.permission === 2
				.procedure-write
					h2 #{procedure.name}
					if("#{message}")
						h4(style='color:red') #{message}
					input(type='hidden', name='url', value='#{url}')
					if(typeof(image) !== 'undefined')
						img(src="data:image/jpeg;base64,#{image}",class="procedure-image")
					//form(action='/procedure/'+procedure.idProcedure, method="POST")
					if(typeof(idUser) !== 'undefined')
						input(type="hidden", name="iduser", value="#{idUser}")
					if(typeof(idProject) !== 'undefined')
						input(type="hidden", name="idproject", value="#{idProject}")
					if(typeof(idEmployee) !== 'undefined')
						input(type="hidden", name="idemployee", value="#{idEmployee}")
					if(typeof(procedure.idProcedure) !== 'undefined')
						input(type="hidden", name="idprocedure", value="#{procedure.idProcedure}")
					-var bloc = null;
					-var previous =null;
						if(typeof(procedure.instructionList) !== "undefined")
							.list
								each instruction, i in procedure.instructionList
									if(instruction.idInstruction !== null)
										.instruction-write
											-bloc=instruction.block
											if(bloc != null)
												if(bloc != previous)
													-previous= bloc  

													h3 #{instruction.block}
											else
												.bloc
											ul
												li 
													-var style = (instruction.value>-2?(instruction.value==-1?'background-color:gray':'background-color:green'):'')
													table(class="instruction-table")
														tr
															td
																h3 #{instruction.statement}
														tr            
															td
																if instruction.description !== undefined 
																	p #{instruction.description}
														tr 
															-var flag = true;
															-var mean = 0
															-var n = instruction.maximum
															-var sum = 0
															-var step = instruction.step ||1;
															-var count = (((instruction.maximum-instruction.minimum)+1)/step)
															td
																table(style=style, name="#{instruction.idInstruction}-table", class="instruction-table")
																	if instruction.type !== undefined && instruction.type == 'question'

																		while n >= instruction.minimum
																			-sum=sum+n
																			-var l = null
																			each v, k in instruction.label
																				if k === n+''
																					-l=v

																			if l !== null

																				if instruction.maximum > 1
																					-flag = false;
																					tr
																						td(style='text-align: left')
																							input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																						td(style='text-align: left;')
																							-var lab = null
																							each x, z in instruction.mask
																								if z === n+''
																									-lab=x
																							if lab !== null        
																								label (#{lab})
																							| #{l} 
																			if flag
																				tr
																					td(style='text-align: left;')
																						input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																					td(style='text-align: left;')
																						br
																						label #{l} 
																			-n=n-step

																		input(type="hidden", name="#{instruction.name}-idinstruction", value="#{instruction.idInstruction}")    
																	else
																		tr
																			while n >= instruction.minimum
																				-sum=sum+n
																				-var l = null
																				each v, k in instruction.label
																					if k === n+''
																						-l=v

																				if l !== null

																					if instruction.maximum > 1
																						-flag = false;
																						td
																							input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																							br
																							label (#{n})
																							br
																							| #{l} 
																				if flag
																					td
																						input(type="radio", name="#{instruction.name}", value=n, checked="#{instruction.value}"==n)
																						br
																						label #{l} 
																				-n=n-step
																			td
																				input(type="radio", name="#{instruction.name}", class="not-applicable", value=-1, checked="#{instruction.value}"==-1)
																				br
																				label NA
																			-mean=sum/count
																			input(type="hidden", name="#{instruction.name}-idinstruction", value="#{instruction.idInstruction}")
																			input(type='hidden', name='#{instruction.idInstruction}-mean', value='#{mean}')
															td
																-var show = ((instruction.value >= instruction.minimum && Math.round(Number(instruction.value)) !== mean)?'visible':'hidden');
																div(name="#{instruction.idInstruction}-div", class=show, id='comment-div')
																	table
																		tr
																			td
																				textarea(name="#{instruction.idInstruction}-textarea", class='textbox', style="width: 200px; height: 100px;") 
																					-var instructionComment = (instruction.comment !== "null"?true:false);
																					if instructionComment
																						| #{instruction.comment}
																		tr
																			td
																				input(type="button", class="button", id="comment",name="#{instruction.idInstruction}",  value="COMMENT")
														tr  
															td
																if instruction.activityDate != '0000-00-00 00:00:00'
																	| #{instruction.activityDate}
							if(typeof(idEmployee) !== 'undefined')
								input(type="button",class="button", id="sign", value="SIGN")
			else if procedure.permission === 1
				.procedure-read
					h2 #{procedure.name}
					if(typeof(image) !== 'undefined')
						img(src="data:image/jpeg;base64,#{image}",class="procedure-image")
					if(typeof(procedure.instructionList) !== "undefined")
						.list
							each instruction, i in procedure.instructionList
								.instruction-read
									-bloc=instruction.block
									if(bloc != null)
										if(bloc != previous)
											-previous= bloc  

											h3 #{instruction.block}
									else
										.bloc
									ul
										li  
											.instruction-statement
												h2 #{instruction.statement}
											.instruction-value
												h3 VALUE
												-var n = instruction.maximum
												-var sum = 0
												-var mean = 0
												-var step = instruction.step ||1;
												-var count = (((instruction.maximum-instruction.minimum)+1)/step)
												-var value = true;
												-var l
												while n >= instruction.minimum && value
													-sum=sum+n

													-l = null
													each v, k in instruction.label
														if k === n+''
															-l=v

													if instruction.value == n
														-value=false
														-n=n+step
													-n=n-step

												-mean=sum/count
												if(value)
													if(instruction.value==-1)
														| NA
													else
														| PENDING
												else
													if(l !== null)
														| (#{l})
														br
														| #{n} 
													else
														| #{n}
											.instruction
												br
												if instruction.activityDate != '0000-00-00 00:00:00'
													h3 LAST ACTIVITY
													| #{instruction.activityDate}
												br
												if instruction.description !== null
													h3 DESCRIPTION
													| #{instruction.description}
												br
												if instruction.comment !== null
													h3 COMMENT
													| #{instruction.comment}


			else
				p Not Authorized
		else
			p Empty
block append body-script
	script(type='text/javascript', src='/meritbuilders/js/procedure.js'). 
